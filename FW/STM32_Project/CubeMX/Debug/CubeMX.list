
CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000221c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022dc  080022dc  000032dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800231c  0800231c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800231c  0800231c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800231c  0800231c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800231c  0800231c  0000331c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002320  08002320  00003320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002324  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002330  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002330  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d32  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001663  00000000  00000000  0000ad66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000561  00000000  00000000  0000cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b94  00000000  00000000  0000d049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098c6  00000000  00000000  0001ebdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d4f6  00000000  00000000  000284a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001858  00000000  00000000  000959dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00097234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022c4 	.word	0x080022c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022c4 	.word	0x080022c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa98 	bl	800075a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8e1 	bl	80003f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f967 	bl	8000500 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f925 	bl	8000480 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA5_Pin, GPIO_PIN_SET);
 8000236:	23a0      	movs	r3, #160	@ 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2201      	movs	r2, #1
 800023c:	2120      	movs	r1, #32
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fd4a 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA6_Pin, GPIO_PIN_SET);
 8000244:	23a0      	movs	r3, #160	@ 0xa0
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2201      	movs	r2, #1
 800024a:	2140      	movs	r1, #64	@ 0x40
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fd43 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA7_Pin, GPIO_PIN_SET);
 8000252:	23a0      	movs	r3, #160	@ 0xa0
 8000254:	05db      	lsls	r3, r3, #23
 8000256:	2201      	movs	r2, #1
 8000258:	2180      	movs	r1, #128	@ 0x80
 800025a:	0018      	movs	r0, r3
 800025c:	f000 fd3c 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA8_Pin, GPIO_PIN_SET);
 8000260:	2380      	movs	r3, #128	@ 0x80
 8000262:	0059      	lsls	r1, r3, #1
 8000264:	23a0      	movs	r3, #160	@ 0xa0
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2201      	movs	r2, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fd34 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000270:	23fa      	movs	r3, #250	@ 0xfa
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 faed 	bl	8000854 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA5_Pin, GPIO_PIN_RESET);
 800027a:	23a0      	movs	r3, #160	@ 0xa0
 800027c:	05db      	lsls	r3, r3, #23
 800027e:	2200      	movs	r2, #0
 8000280:	2120      	movs	r1, #32
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fd28 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA6_Pin, GPIO_PIN_RESET);
 8000288:	23a0      	movs	r3, #160	@ 0xa0
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2200      	movs	r2, #0
 800028e:	2140      	movs	r1, #64	@ 0x40
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fd21 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA7_Pin, GPIO_PIN_RESET);
 8000296:	23a0      	movs	r3, #160	@ 0xa0
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2200      	movs	r2, #0
 800029c:	2180      	movs	r1, #128	@ 0x80
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fd1a 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA8_Pin, GPIO_PIN_RESET);
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	0059      	lsls	r1, r3, #1
 80002a8:	23a0      	movs	r3, #160	@ 0xa0
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	2200      	movs	r2, #0
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fd12 	bl	8000cd8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80002b4:	23fa      	movs	r3, #250	@ 0xfa
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 facb 	bl	8000854 <HAL_Delay>

	//////////// 1. Read Chip ID
	HAL_I2C_Mem_Read(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_CHIP_ID, 1, &rx_buffer, 1, HAL_MAX_DELAY);
 80002be:	4845      	ldr	r0, [pc, #276]	@ (80003d4 <main+0x1b4>)
 80002c0:	2301      	movs	r3, #1
 80002c2:	425b      	negs	r3, r3
 80002c4:	9302      	str	r3, [sp, #8]
 80002c6:	2301      	movs	r3, #1
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	4b43      	ldr	r3, [pc, #268]	@ (80003d8 <main+0x1b8>)
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2301      	movs	r3, #1
 80002d0:	2200      	movs	r2, #0
 80002d2:	2148      	movs	r1, #72	@ 0x48
 80002d4:	f000 fef2 	bl	80010bc <HAL_I2C_Mem_Read>
	chip_id = rx_buffer;
 80002d8:	4b3f      	ldr	r3, [pc, #252]	@ (80003d8 <main+0x1b8>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b3f      	ldr	r3, [pc, #252]	@ (80003dc <main+0x1bc>)
 80002de:	701a      	strb	r2, [r3, #0]

	//////////// 2. Read Enable Register
	HAL_I2C_Mem_Read(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_ENABLE, 1, &rx_buffer, 1, HAL_MAX_DELAY);
 80002e0:	483c      	ldr	r0, [pc, #240]	@ (80003d4 <main+0x1b4>)
 80002e2:	2301      	movs	r3, #1
 80002e4:	425b      	negs	r3, r3
 80002e6:	9302      	str	r3, [sp, #8]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	4b3a      	ldr	r3, [pc, #232]	@ (80003d8 <main+0x1b8>)
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2301      	movs	r3, #1
 80002f2:	2216      	movs	r2, #22
 80002f4:	2148      	movs	r1, #72	@ 0x48
 80002f6:	f000 fee1 	bl	80010bc <HAL_I2C_Mem_Read>
	reg_enable = rx_buffer;
 80002fa:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <main+0x1b8>)
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	4b38      	ldr	r3, [pc, #224]	@ (80003e0 <main+0x1c0>)
 8000300:	701a      	strb	r2, [r3, #0]

	//////////// 3. Read SEQ6 Register
	HAL_I2C_Mem_Read(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_SEQ6, 1, &rx_buffer, 1, HAL_MAX_DELAY);
 8000302:	4834      	ldr	r0, [pc, #208]	@ (80003d4 <main+0x1b4>)
 8000304:	2301      	movs	r3, #1
 8000306:	425b      	negs	r3, r3
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <main+0x1b8>)
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	221e      	movs	r2, #30
 8000316:	2148      	movs	r1, #72	@ 0x48
 8000318:	f000 fed0 	bl	80010bc <HAL_I2C_Mem_Read>
	reg_seq6 = rx_buffer;
 800031c:	4b2e      	ldr	r3, [pc, #184]	@ (80003d8 <main+0x1b8>)
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	4b30      	ldr	r3, [pc, #192]	@ (80003e4 <main+0x1c4>)
 8000322:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000324:	2001      	movs	r0, #1
 8000326:	f000 fa95 	bl	8000854 <HAL_Delay>

	//////////// 4. Initialize SEQ Down
	// 4-1. Password Register Write
	reg_passwd = REG_ADDR_SEQ6 ^ 0x7D;
 800032a:	4b2f      	ldr	r3, [pc, #188]	@ (80003e8 <main+0x1c8>)
 800032c:	2263      	movs	r2, #99	@ 0x63
 800032e:	701a      	strb	r2, [r3, #0]
	tx_buffer = reg_passwd;
 8000330:	4b2d      	ldr	r3, [pc, #180]	@ (80003e8 <main+0x1c8>)
 8000332:	781a      	ldrb	r2, [r3, #0]
 8000334:	4b2d      	ldr	r3, [pc, #180]	@ (80003ec <main+0x1cc>)
 8000336:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_PASSWD, 1, &tx_buffer, 1, HAL_MAX_DELAY);
 8000338:	4826      	ldr	r0, [pc, #152]	@ (80003d4 <main+0x1b4>)
 800033a:	2301      	movs	r3, #1
 800033c:	425b      	negs	r3, r3
 800033e:	9302      	str	r3, [sp, #8]
 8000340:	2301      	movs	r3, #1
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	4b29      	ldr	r3, [pc, #164]	@ (80003ec <main+0x1cc>)
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2301      	movs	r3, #1
 800034a:	220b      	movs	r2, #11
 800034c:	2148      	movs	r1, #72	@ 0x48
 800034e:	f000 fd87 	bl	8000e60 <HAL_I2C_Mem_Write>

	// 4-2. Set SEQDWN bit
	tx_buffer = reg_seq6 | 0x02;
 8000352:	4b24      	ldr	r3, [pc, #144]	@ (80003e4 <main+0x1c4>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	2202      	movs	r2, #2
 8000358:	4313      	orrs	r3, r2
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <main+0x1cc>)
 800035e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_SEQ6, 1, &tx_buffer, 1, HAL_MAX_DELAY);
 8000360:	481c      	ldr	r0, [pc, #112]	@ (80003d4 <main+0x1b4>)
 8000362:	2301      	movs	r3, #1
 8000364:	425b      	negs	r3, r3
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	2301      	movs	r3, #1
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <main+0x1cc>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2301      	movs	r3, #1
 8000372:	221e      	movs	r2, #30
 8000374:	2148      	movs	r1, #72	@ 0x48
 8000376:	f000 fd73 	bl	8000e60 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800037a:	2064      	movs	r0, #100	@ 0x64
 800037c:	f000 fa6a 	bl	8000854 <HAL_Delay>


	//////////// 5. Enable All Rails
	// 5-1. Password Register Write
	reg_passwd = REG_ADDR_ENABLE ^ 0x7D;
 8000380:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <main+0x1c8>)
 8000382:	226b      	movs	r2, #107	@ 0x6b
 8000384:	701a      	strb	r2, [r3, #0]
	tx_buffer = reg_passwd;
 8000386:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <main+0x1c8>)
 8000388:	781a      	ldrb	r2, [r3, #0]
 800038a:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <main+0x1cc>)
 800038c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_PASSWD, 1, &tx_buffer, 1, HAL_MAX_DELAY);
 800038e:	4811      	ldr	r0, [pc, #68]	@ (80003d4 <main+0x1b4>)
 8000390:	2301      	movs	r3, #1
 8000392:	425b      	negs	r3, r3
 8000394:	9302      	str	r3, [sp, #8]
 8000396:	2301      	movs	r3, #1
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <main+0x1cc>)
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	2301      	movs	r3, #1
 80003a0:	220b      	movs	r2, #11
 80003a2:	2148      	movs	r1, #72	@ 0x48
 80003a4:	f000 fd5c 	bl	8000e60 <HAL_I2C_Mem_Write>

	// 5-2. Enable Register Write
	tx_buffer = 0x7F;
 80003a8:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <main+0x1cc>)
 80003aa:	227f      	movs	r2, #127	@ 0x7f
 80003ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, I2C1_SLAVE_ADDR, REG_ADDR_ENABLE, 1, &tx_buffer, 1, HAL_MAX_DELAY);
 80003ae:	4809      	ldr	r0, [pc, #36]	@ (80003d4 <main+0x1b4>)
 80003b0:	2301      	movs	r3, #1
 80003b2:	425b      	negs	r3, r3
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2301      	movs	r3, #1
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <main+0x1cc>)
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2301      	movs	r3, #1
 80003c0:	2216      	movs	r2, #22
 80003c2:	2148      	movs	r1, #72	@ 0x48
 80003c4:	f000 fd4c 	bl	8000e60 <HAL_I2C_Mem_Write>

	HAL_Delay(100);
 80003c8:	2064      	movs	r0, #100	@ 0x64
 80003ca:	f000 fa43 	bl	8000854 <HAL_Delay>
	HAL_GPIO_WritePin(MCU_GPIO_PA5_GPIO_Port, MCU_GPIO_PA5_Pin, GPIO_PIN_SET);
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	e731      	b.n	8000236 <main+0x16>
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	20000028 	.word	0x20000028
 80003d8:	2000007d 	.word	0x2000007d
 80003dc:	2000007e 	.word	0x2000007e
 80003e0:	2000007f 	.word	0x2000007f
 80003e4:	20000080 	.word	0x20000080
 80003e8:	20000081 	.word	0x20000081
 80003ec:	2000007c 	.word	0x2000007c

080003f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b08d      	sub	sp, #52	@ 0x34
 80003f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003f6:	2414      	movs	r4, #20
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	231c      	movs	r3, #28
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f001 ff33 	bl	800226c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000406:	003b      	movs	r3, r7
 8000408:	0018      	movs	r0, r3
 800040a:	2314      	movs	r3, #20
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f001 ff2c 	bl	800226c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000414:	4b19      	ldr	r3, [pc, #100]	@ (800047c <SystemClock_Config+0x8c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2207      	movs	r2, #7
 800041a:	4393      	bics	r3, r2
 800041c:	001a      	movs	r2, r3
 800041e:	4b17      	ldr	r3, [pc, #92]	@ (800047c <SystemClock_Config+0x8c>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	22a0      	movs	r2, #160	@ 0xa0
 8000430:	02d2      	lsls	r2, r2, #11
 8000432:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fb08 	bl	8001a4c <HAL_RCC_OscConfig>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000440:	f000 f8b0 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000444:	003b      	movs	r3, r7
 8000446:	2207      	movs	r2, #7
 8000448:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800044a:	003b      	movs	r3, r7
 800044c:	2201      	movs	r2, #1
 800044e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	003b      	movs	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000456:	003b      	movs	r3, r7
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800045c:	003b      	movs	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000462:	003b      	movs	r3, r7
 8000464:	2101      	movs	r1, #1
 8000466:	0018      	movs	r0, r3
 8000468:	f001 fcd4 	bl	8001e14 <HAL_RCC_ClockConfig>
 800046c:	1e03      	subs	r3, r0, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000470:	f000 f898 	bl	80005a4 <Error_Handler>
  }
}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b00d      	add	sp, #52	@ 0x34
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	40022000 	.word	0x40022000

08000480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000484:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <MX_I2C1_Init+0x74>)
 8000486:	4a1c      	ldr	r2, [pc, #112]	@ (80004f8 <MX_I2C1_Init+0x78>)
 8000488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0090194B;
 800048a:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <MX_I2C1_Init+0x74>)
 800048c:	4a1b      	ldr	r2, [pc, #108]	@ (80004fc <MX_I2C1_Init+0x7c>)
 800048e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000490:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000496:	4b17      	ldr	r3, [pc, #92]	@ (80004f4 <MX_I2C1_Init+0x74>)
 8000498:	2201      	movs	r2, #1
 800049a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800049c:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a8:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004ae:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fc29 	bl	8000d14 <HAL_I2C_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004c6:	f000 f86d 	bl	80005a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004ca:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004cc:	2100      	movs	r1, #0
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 fa24 	bl	800191c <HAL_I2CEx_ConfigAnalogFilter>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004d8:	f000 f864 	bl	80005a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <MX_I2C1_Init+0x74>)
 80004de:	2100      	movs	r1, #0
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fa67 	bl	80019b4 <HAL_I2CEx_ConfigDigitalFilter>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004ea:	f000 f85b 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000028 	.word	0x20000028
 80004f8:	40005400 	.word	0x40005400
 80004fc:	0090194b 	.word	0x0090194b

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b089      	sub	sp, #36	@ 0x24
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	240c      	movs	r4, #12
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f001 feab 	bl	800226c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b1f      	ldr	r3, [pc, #124]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000532:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000534:	2102      	movs	r1, #2
 8000536:	430a      	orrs	r2, r1
 8000538:	635a      	str	r2, [r3, #52]	@ 0x34
 800053a:	4b19      	ldr	r3, [pc, #100]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 800053c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800053e:	2202      	movs	r2, #2
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 800054c:	2104      	movs	r1, #4
 800054e:	430a      	orrs	r2, r1
 8000550:	635a      	str	r2, [r3, #52]	@ 0x34
 8000552:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000556:	2204      	movs	r2, #4
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_GPIO_PA5_Pin|MCU_GPIO_PA6_Pin|MCU_GPIO_PA7_Pin|MCU_GPIO_PA8_Pin, GPIO_PIN_RESET);
 800055e:	23f0      	movs	r3, #240	@ 0xf0
 8000560:	0059      	lsls	r1, r3, #1
 8000562:	23a0      	movs	r3, #160	@ 0xa0
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2200      	movs	r2, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fbb5 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MCU_GPIO_PA5_Pin MCU_GPIO_PA6_Pin MCU_GPIO_PA7_Pin MCU_GPIO_PA8_Pin */
  GPIO_InitStruct.Pin = MCU_GPIO_PA5_Pin|MCU_GPIO_PA6_Pin|MCU_GPIO_PA7_Pin|MCU_GPIO_PA8_Pin;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	22f0      	movs	r2, #240	@ 0xf0
 8000572:	0052      	lsls	r2, r2, #1
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2201      	movs	r2, #1
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	193a      	adds	r2, r7, r4
 800058a:	23a0      	movs	r3, #160	@ 0xa0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fa37 	bl	8000a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b009      	add	sp, #36	@ 0x24
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	e7fd      	b.n	80005ac <Error_Handler+0x8>

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_MspInit+0x44>)
 80005b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <HAL_MspInit+0x44>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_MspInit+0x44>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	2201      	movs	r2, #1
 80005c8:	4013      	ands	r3, r2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_MspInit+0x44>)
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	0549      	lsls	r1, r1, #21
 80005d8:	430a      	orrs	r2, r1
 80005da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_MspInit+0x44>)
 80005de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	055b      	lsls	r3, r3, #21
 80005e4:	4013      	ands	r3, r2
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b002      	add	sp, #8
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b091      	sub	sp, #68	@ 0x44
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	232c      	movs	r3, #44	@ 0x2c
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	0018      	movs	r0, r3
 8000606:	2314      	movs	r3, #20
 8000608:	001a      	movs	r2, r3
 800060a:	2100      	movs	r1, #0
 800060c:	f001 fe2e 	bl	800226c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	2410      	movs	r4, #16
 8000612:	193b      	adds	r3, r7, r4
 8000614:	0018      	movs	r0, r3
 8000616:	231c      	movs	r3, #28
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f001 fe26 	bl	800226c <memset>
  if(hi2c->Instance==I2C1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <HAL_I2C_MspInit+0xb8>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d13d      	bne.n	80006a6 <HAL_I2C_MspInit+0xae>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	193b      	adds	r3, r7, r4
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fd2b 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000642:	f7ff ffaf 	bl	80005a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 800064c:	2102      	movs	r1, #2
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000656:	2202      	movs	r2, #2
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800065e:	212c      	movs	r1, #44	@ 0x2c
 8000660:	187b      	adds	r3, r7, r1
 8000662:	22c0      	movs	r2, #192	@ 0xc0
 8000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2212      	movs	r2, #18
 800066a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2206      	movs	r2, #6
 800067c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	187b      	adds	r3, r7, r1
 8000680:	4a0d      	ldr	r2, [pc, #52]	@ (80006b8 <HAL_I2C_MspInit+0xc0>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f000 f9bd 	bl	8000a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 800068c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	0389      	lsls	r1, r1, #14
 8000694:	430a      	orrs	r2, r1
 8000696:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_I2C_MspInit+0xbc>)
 800069a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800069c:	2380      	movs	r3, #128	@ 0x80
 800069e:	039b      	lsls	r3, r3, #14
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b011      	add	sp, #68	@ 0x44
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	40005400 	.word	0x40005400
 80006b4:	40021000 	.word	0x40021000
 80006b8:	50000400 	.word	0x50000400

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	e7fd      	b.n	80006c0 <NMI_Handler+0x4>

080006c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	e7fd      	b.n	80006c8 <HardFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f89a 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <SystemInit+0x14>)
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	0512      	lsls	r2, r2, #20
 80006fa:	609a      	str	r2, [r3, #8]
#endif
}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000708:	480d      	ldr	r0, [pc, #52]	@ (8000740 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800070a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800070c:	f7ff fff0 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000710:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000712:	e003      	b.n	800071c <LoopCopyDataInit>

08000714 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000716:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000718:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800071a:	3104      	adds	r1, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800071c:	480a      	ldr	r0, [pc, #40]	@ (8000748 <LoopForever+0xa>)
  ldr r3, =_edata
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <LoopForever+0xe>)
  adds r2, r0, r1
 8000720:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000722:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000724:	d3f6      	bcc.n	8000714 <CopyDataInit>
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopForever+0x12>)
  b LoopFillZerobss
 8000728:	e002      	b.n	8000730 <LoopFillZerobss>

0800072a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  str  r3, [r2]
 800072c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072e:	3204      	adds	r2, #4

08000730 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <LoopForever+0x16>)
  cmp r2, r3
 8000732:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000734:	d3f9      	bcc.n	800072a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000736:	f001 fda1 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800073a:	f7ff fd71 	bl	8000220 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   r0, =_estack
 8000740:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000744:	08002324 	.word	0x08002324
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800074c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000750:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000754:	20000088 	.word	0x20000088

08000758 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_IRQHandler>

0800075a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b082      	sub	sp, #8
 800075e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000766:	2003      	movs	r0, #3
 8000768:	f000 f80e 	bl	8000788 <HAL_InitTick>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d003      	beq.n	8000778 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e001      	b.n	800077c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000778:	f7ff ff1a 	bl	80005b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000790:	230f      	movs	r3, #15
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <HAL_InitTick+0x88>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d02b      	beq.n	80007f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80007a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <HAL_InitTick+0x8c>)
 80007a2:	681c      	ldr	r4, [r3, #0]
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <HAL_InitTick+0x88>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	0019      	movs	r1, r3
 80007aa:	23fa      	movs	r3, #250	@ 0xfa
 80007ac:	0098      	lsls	r0, r3, #2
 80007ae:	f7ff fcab 	bl	8000108 <__udivsi3>
 80007b2:	0003      	movs	r3, r0
 80007b4:	0019      	movs	r1, r3
 80007b6:	0020      	movs	r0, r4
 80007b8:	f7ff fca6 	bl	8000108 <__udivsi3>
 80007bc:	0003      	movs	r3, r0
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 f913 	bl	80009ea <HAL_SYSTICK_Config>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d112      	bne.n	80007ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d80a      	bhi.n	80007e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f8f2 	bl	80009c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_InitTick+0x90>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e00d      	b.n	8000800 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007e4:	230f      	movs	r3, #15
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	2201      	movs	r2, #1
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e008      	b.n	8000800 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007ee:	230f      	movs	r3, #15
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
 80007f6:	e003      	b.n	8000800 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f8:	230f      	movs	r3, #15
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b005      	add	sp, #20
 800080c:	bd90      	pop	{r4, r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	20000008 	.word	0x20000008
 8000814:	20000000 	.word	0x20000000
 8000818:	20000004 	.word	0x20000004

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_IncTick+0x1c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	4b05      	ldr	r3, [pc, #20]	@ (800083c <HAL_IncTick+0x20>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	18d2      	adds	r2, r2, r3
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <HAL_IncTick+0x20>)
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	20000008 	.word	0x20000008
 800083c:	20000084 	.word	0x20000084

08000840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b02      	ldr	r3, [pc, #8]	@ (8000850 <HAL_GetTick+0x10>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	20000084 	.word	0x20000084

08000854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff fff0 	bl	8000840 <HAL_GetTick>
 8000860:	0003      	movs	r3, r0
 8000862:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	d005      	beq.n	800087a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086e:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <HAL_Delay+0x44>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	001a      	movs	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	189b      	adds	r3, r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	f7ff ffe0 	bl	8000840 <HAL_GetTick>
 8000880:	0002      	movs	r2, r0
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	429a      	cmp	r2, r3
 800088a:	d8f7      	bhi.n	800087c <HAL_Delay+0x28>
  {
  }
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b004      	add	sp, #16
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	20000008 	.word	0x20000008

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	0002      	movs	r2, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80008b0:	d828      	bhi.n	8000904 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <__NVIC_SetPriority+0xd4>)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	33c0      	adds	r3, #192	@ 0xc0
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	589b      	ldr	r3, [r3, r2]
 80008c2:	1dfa      	adds	r2, r7, #7
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	0011      	movs	r1, r2
 80008c8:	2203      	movs	r2, #3
 80008ca:	400a      	ands	r2, r1
 80008cc:	00d2      	lsls	r2, r2, #3
 80008ce:	21ff      	movs	r1, #255	@ 0xff
 80008d0:	4091      	lsls	r1, r2
 80008d2:	000a      	movs	r2, r1
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	401a      	ands	r2, r3
 80008d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	22ff      	movs	r2, #255	@ 0xff
 80008e0:	401a      	ands	r2, r3
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0018      	movs	r0, r3
 80008e8:	2303      	movs	r3, #3
 80008ea:	4003      	ands	r3, r0
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f0:	481f      	ldr	r0, [pc, #124]	@ (8000970 <__NVIC_SetPriority+0xd4>)
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	089b      	lsrs	r3, r3, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	33c0      	adds	r3, #192	@ 0xc0
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000902:	e031      	b.n	8000968 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <__NVIC_SetPriority+0xd8>)
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	0019      	movs	r1, r3
 800090c:	230f      	movs	r3, #15
 800090e:	400b      	ands	r3, r1
 8000910:	3b08      	subs	r3, #8
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3306      	adds	r3, #6
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	3304      	adds	r3, #4
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1dfa      	adds	r2, r7, #7
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	0011      	movs	r1, r2
 8000924:	2203      	movs	r2, #3
 8000926:	400a      	ands	r2, r1
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	21ff      	movs	r1, #255	@ 0xff
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	43d2      	mvns	r2, r2
 8000932:	401a      	ands	r2, r3
 8000934:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	019b      	lsls	r3, r3, #6
 800093a:	22ff      	movs	r2, #255	@ 0xff
 800093c:	401a      	ands	r2, r3
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	0018      	movs	r0, r3
 8000944:	2303      	movs	r3, #3
 8000946:	4003      	ands	r3, r0
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094c:	4809      	ldr	r0, [pc, #36]	@ (8000974 <__NVIC_SetPriority+0xd8>)
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	001c      	movs	r4, r3
 8000954:	230f      	movs	r3, #15
 8000956:	4023      	ands	r3, r4
 8000958:	3b08      	subs	r3, #8
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	430a      	orrs	r2, r1
 800095e:	3306      	adds	r3, #6
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	18c3      	adds	r3, r0, r3
 8000964:	3304      	adds	r3, #4
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b003      	add	sp, #12
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	045b      	lsls	r3, r3, #17
 8000988:	429a      	cmp	r2, r3
 800098a:	d301      	bcc.n	8000990 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098c:	2301      	movs	r3, #1
 800098e:	e010      	b.n	80009b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <SysTick_Config+0x44>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	3a01      	subs	r2, #1
 8000996:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000998:	2301      	movs	r3, #1
 800099a:	425b      	negs	r3, r3
 800099c:	2103      	movs	r1, #3
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff ff7c 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <SysTick_Config+0x44>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <SysTick_Config+0x44>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	0018      	movs	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	210f      	movs	r1, #15
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	1c02      	adds	r2, r0, #0
 80009d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff ff5d 	bl	800089c <__NVIC_SetPriority>
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b004      	add	sp, #16
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b082      	sub	sp, #8
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff ffbf 	bl	8000978 <SysTick_Config>
 80009fa:	0003      	movs	r3, r0
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a12:	e14d      	b.n	8000cb0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4091      	lsls	r1, r2
 8000a1e:	000a      	movs	r2, r1
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d100      	bne.n	8000a2c <HAL_GPIO_Init+0x28>
 8000a2a:	e13e      	b.n	8000caa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x38>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2b12      	cmp	r3, #18
 8000a3a:	d125      	bne.n	8000a88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	08da      	lsrs	r2, r3, #3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3208      	adds	r2, #8
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	58d3      	ldr	r3, [r2, r3]
 8000a48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	4013      	ands	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	220f      	movs	r2, #15
 8000a54:	409a      	lsls	r2, r3
 8000a56:	0013      	movs	r3, r2
 8000a58:	43da      	mvns	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	220f      	movs	r2, #15
 8000a66:	401a      	ands	r2, r3
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	2107      	movs	r1, #7
 8000a6c:	400b      	ands	r3, r1
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	409a      	lsls	r2, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	08da      	lsrs	r2, r3, #3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3208      	adds	r2, #8
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	6979      	ldr	r1, [r7, #20]
 8000a86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2203      	movs	r2, #3
 8000a94:	409a      	lsls	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	409a      	lsls	r2, r3
 8000aae:	0013      	movs	r3, r2
 8000ab0:	697a      	ldr	r2, [r7, #20]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d00b      	beq.n	8000adc <HAL_GPIO_Init+0xd8>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d007      	beq.n	8000adc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad0:	2b11      	cmp	r3, #17
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b12      	cmp	r3, #18
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	43da      	mvns	r2, r3
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	4013      	ands	r3, r2
 8000af2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	409a      	lsls	r2, r3
 8000afe:	0013      	movs	r3, r2
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	2201      	movs	r2, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b03      	cmp	r3, #3
 8000b44:	d017      	beq.n	8000b76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	2203      	movs	r2, #3
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	43da      	mvns	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	2380      	movs	r3, #128	@ 0x80
 8000b7c:	055b      	lsls	r3, r3, #21
 8000b7e:	4013      	ands	r3, r2
 8000b80:	d100      	bne.n	8000b84 <HAL_GPIO_Init+0x180>
 8000b82:	e092      	b.n	8000caa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b84:	4a50      	ldr	r2, [pc, #320]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3318      	adds	r3, #24
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	589b      	ldr	r3, [r3, r2]
 8000b90:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	43da      	mvns	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	23a0      	movs	r3, #160	@ 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0x1d6>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a45      	ldr	r2, [pc, #276]	@ (8000ccc <HAL_GPIO_Init+0x2c8>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d00d      	beq.n	8000bd6 <HAL_GPIO_Init+0x1d2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a44      	ldr	r2, [pc, #272]	@ (8000cd0 <HAL_GPIO_Init+0x2cc>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d007      	beq.n	8000bd2 <HAL_GPIO_Init+0x1ce>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a43      	ldr	r2, [pc, #268]	@ (8000cd4 <HAL_GPIO_Init+0x2d0>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d101      	bne.n	8000bce <HAL_GPIO_Init+0x1ca>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x1d8>
 8000bce:	2306      	movs	r3, #6
 8000bd0:	e004      	b.n	8000bdc <HAL_GPIO_Init+0x1d8>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e002      	b.n	8000bdc <HAL_GPIO_Init+0x1d8>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e000      	b.n	8000bdc <HAL_GPIO_Init+0x1d8>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	2103      	movs	r1, #3
 8000be0:	400a      	ands	r2, r1
 8000be2:	00d2      	lsls	r2, r2, #3
 8000be4:	4093      	lsls	r3, r2
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000bec:	4936      	ldr	r1, [pc, #216]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3318      	adds	r3, #24
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000bfa:	4a33      	ldr	r2, [pc, #204]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	58d3      	ldr	r3, [r2, r3]
 8000c00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43da      	mvns	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	025b      	lsls	r3, r3, #9
 8000c14:	4013      	ands	r3, r2
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000c20:	4929      	ldr	r1, [pc, #164]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000c28:	4a27      	ldr	r2, [pc, #156]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c2a:	2384      	movs	r3, #132	@ 0x84
 8000c2c:	58d3      	ldr	r3, [r2, r3]
 8000c2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43da      	mvns	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4013      	ands	r3, r2
 8000c38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	029b      	lsls	r3, r3, #10
 8000c42:	4013      	ands	r3, r2
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000c4e:	491e      	ldr	r1, [pc, #120]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c50:	2284      	movs	r2, #132	@ 0x84
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	4013      	ands	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	035b      	lsls	r3, r3, #13
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	039b      	lsls	r3, r3, #14
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_GPIO_Init+0x2c4>)
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	3301      	adds	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	40da      	lsrs	r2, r3
 8000cb8:	1e13      	subs	r3, r2, #0
 8000cba:	d000      	beq.n	8000cbe <HAL_GPIO_Init+0x2ba>
 8000cbc:	e6aa      	b.n	8000a14 <HAL_GPIO_Init+0x10>
  }
}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b006      	add	sp, #24
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	50000400 	.word	0x50000400
 8000cd0:	50000800 	.word	0x50000800
 8000cd4:	50001400 	.word	0x50001400

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	0008      	movs	r0, r1
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	1c02      	adds	r2, r0, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	1c7b      	adds	r3, r7, #1
 8000cec:	1c0a      	adds	r2, r1, #0
 8000cee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf0:	1c7b      	adds	r3, r7, #1
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d004      	beq.n	8000d02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf8:	1cbb      	adds	r3, r7, #2
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d00:	e003      	b.n	8000d0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d02:	1cbb      	adds	r3, r7, #2
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e08f      	b.n	8000e46 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2241      	movs	r2, #65	@ 0x41
 8000d2a:	5c9b      	ldrb	r3, [r3, r2]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d107      	bne.n	8000d42 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2240      	movs	r2, #64	@ 0x40
 8000d36:	2100      	movs	r1, #0
 8000d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fc5b 	bl	80005f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2241      	movs	r2, #65	@ 0x41
 8000d46:	2124      	movs	r1, #36	@ 0x24
 8000d48:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	438a      	bics	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	493b      	ldr	r1, [pc, #236]	@ (8000e50 <HAL_I2C_Init+0x13c>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4938      	ldr	r1, [pc, #224]	@ (8000e54 <HAL_I2C_Init+0x140>)
 8000d74:	400a      	ands	r2, r1
 8000d76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d108      	bne.n	8000d92 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	0209      	lsls	r1, r1, #8
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	e007      	b.n	8000da2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2184      	movs	r1, #132	@ 0x84
 8000d9c:	0209      	lsls	r1, r1, #8
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d109      	bne.n	8000dbe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	0109      	lsls	r1, r1, #4
 8000db8:	430a      	orrs	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	e007      	b.n	8000dce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4923      	ldr	r1, [pc, #140]	@ (8000e58 <HAL_I2C_Init+0x144>)
 8000dca:	400a      	ands	r2, r1
 8000dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4920      	ldr	r1, [pc, #128]	@ (8000e5c <HAL_I2C_Init+0x148>)
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	491a      	ldr	r1, [pc, #104]	@ (8000e54 <HAL_I2C_Init+0x140>)
 8000dea:	400a      	ands	r2, r1
 8000dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691a      	ldr	r2, [r3, #16]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69d9      	ldr	r1, [r3, #28]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1a      	ldr	r2, [r3, #32]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2241      	movs	r2, #65	@ 0x41
 8000e32:	2120      	movs	r1, #32
 8000e34:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2242      	movs	r2, #66	@ 0x42
 8000e40:	2100      	movs	r1, #0
 8000e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	f0ffffff 	.word	0xf0ffffff
 8000e54:	ffff7fff 	.word	0xffff7fff
 8000e58:	fffff7ff 	.word	0xfffff7ff
 8000e5c:	02008000 	.word	0x02008000

08000e60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b089      	sub	sp, #36	@ 0x24
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	000c      	movs	r4, r1
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	230a      	movs	r3, #10
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	1c22      	adds	r2, r4, #0
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	2308      	movs	r3, #8
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	1c02      	adds	r2, r0, #0
 8000e7c:	801a      	strh	r2, [r3, #0]
 8000e7e:	1dbb      	adds	r3, r7, #6
 8000e80:	1c0a      	adds	r2, r1, #0
 8000e82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2241      	movs	r2, #65	@ 0x41
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	d000      	beq.n	8000e92 <HAL_I2C_Mem_Write+0x32>
 8000e90:	e10c      	b.n	80010ac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <HAL_I2C_Mem_Write+0x42>
 8000e98:	232c      	movs	r3, #44	@ 0x2c
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0ff      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2240      	movs	r2, #64	@ 0x40
 8000eb2:	5c9b      	ldrb	r3, [r3, r2]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_I2C_Mem_Write+0x5c>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e0f8      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2240      	movs	r2, #64	@ 0x40
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000ec4:	f7ff fcbc 	bl	8000840 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ecc:	2380      	movs	r3, #128	@ 0x80
 8000ece:	0219      	lsls	r1, r3, #8
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2319      	movs	r3, #25
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f000 fb0b 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e0e3      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2241      	movs	r2, #65	@ 0x41
 8000eea:	2121      	movs	r1, #33	@ 0x21
 8000eec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2242      	movs	r2, #66	@ 0x42
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	222c      	movs	r2, #44	@ 0x2c
 8000f06:	18ba      	adds	r2, r7, r2
 8000f08:	8812      	ldrh	r2, [r2, #0]
 8000f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000f12:	1dbb      	adds	r3, r7, #6
 8000f14:	881c      	ldrh	r4, [r3, #0]
 8000f16:	2308      	movs	r3, #8
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	8819      	ldrh	r1, [r3, #0]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	0023      	movs	r3, r4
 8000f2e:	f000 f9f9 	bl	8001324 <I2C_RequestMemoryWrite>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d005      	beq.n	8000f42 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2240      	movs	r2, #64	@ 0x40
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0b5      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	2bff      	cmp	r3, #255	@ 0xff
 8000f4a:	d911      	bls.n	8000f70 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	22ff      	movs	r2, #255	@ 0xff
 8000f50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	045c      	lsls	r4, r3, #17
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	8819      	ldrh	r1, [r3, #0]
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	2300      	movs	r3, #0
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	0023      	movs	r3, r4
 8000f6a:	f000 fc9d 	bl	80018a8 <I2C_TransferConfig>
 8000f6e:	e012      	b.n	8000f96 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	049c      	lsls	r4, r3, #18
 8000f84:	230a      	movs	r3, #10
 8000f86:	18fb      	adds	r3, r7, r3
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	0023      	movs	r3, r4
 8000f92:	f000 fc89 	bl	80018a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fb01 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fa2:	1e03      	subs	r3, r0, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e081      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d03a      	beq.n	800105a <HAL_I2C_Mem_Write+0x1fa>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d136      	bne.n	800105a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2180      	movs	r1, #128	@ 0x80
 8000ffa:	f000 fa7b 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d001      	beq.n	8001006 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e053      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800100a:	b29b      	uxth	r3, r3
 800100c:	2bff      	cmp	r3, #255	@ 0xff
 800100e:	d911      	bls.n	8001034 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	22ff      	movs	r2, #255	@ 0xff
 8001014:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800101a:	b2da      	uxtb	r2, r3
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	045c      	lsls	r4, r3, #17
 8001020:	230a      	movs	r3, #10
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	8819      	ldrh	r1, [r3, #0]
 8001026:	68f8      	ldr	r0, [r7, #12]
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	0023      	movs	r3, r4
 800102e:	f000 fc3b 	bl	80018a8 <I2C_TransferConfig>
 8001032:	e012      	b.n	800105a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001038:	b29a      	uxth	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001042:	b2da      	uxtb	r2, r3
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	049c      	lsls	r4, r3, #18
 8001048:	230a      	movs	r3, #10
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	8819      	ldrh	r1, [r3, #0]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	2300      	movs	r3, #0
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	0023      	movs	r3, r4
 8001056:	f000 fc27 	bl	80018a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800105e:	b29b      	uxth	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d198      	bne.n	8000f96 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fae0 	bl	8001630 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e01a      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2220      	movs	r2, #32
 800107e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	490b      	ldr	r1, [pc, #44]	@ (80010b8 <HAL_I2C_Mem_Write+0x258>)
 800108c:	400a      	ands	r2, r1
 800108e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2241      	movs	r2, #65	@ 0x41
 8001094:	2120      	movs	r1, #32
 8001096:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2242      	movs	r2, #66	@ 0x42
 800109c:	2100      	movs	r1, #0
 800109e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2240      	movs	r2, #64	@ 0x40
 80010a4:	2100      	movs	r1, #0
 80010a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e000      	b.n	80010ae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80010ac:	2302      	movs	r3, #2
  }
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b007      	add	sp, #28
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	fe00e800 	.word	0xfe00e800

080010bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	000c      	movs	r4, r1
 80010c6:	0010      	movs	r0, r2
 80010c8:	0019      	movs	r1, r3
 80010ca:	230a      	movs	r3, #10
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	1c22      	adds	r2, r4, #0
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	2308      	movs	r3, #8
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	1c02      	adds	r2, r0, #0
 80010d8:	801a      	strh	r2, [r3, #0]
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	1c0a      	adds	r2, r1, #0
 80010de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2241      	movs	r2, #65	@ 0x41
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b20      	cmp	r3, #32
 80010ea:	d000      	beq.n	80010ee <HAL_I2C_Mem_Read+0x32>
 80010ec:	e110      	b.n	8001310 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80010ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <HAL_I2C_Mem_Read+0x42>
 80010f4:	232c      	movs	r3, #44	@ 0x2c
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e103      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2240      	movs	r2, #64	@ 0x40
 800110e:	5c9b      	ldrb	r3, [r3, r2]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_I2C_Mem_Read+0x5c>
 8001114:	2302      	movs	r3, #2
 8001116:	e0fc      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2240      	movs	r2, #64	@ 0x40
 800111c:	2101      	movs	r1, #1
 800111e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001120:	f7ff fb8e 	bl	8000840 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	0219      	lsls	r1, r3, #8
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2319      	movs	r3, #25
 8001134:	2201      	movs	r2, #1
 8001136:	f000 f9dd 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e0e7      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2241      	movs	r2, #65	@ 0x41
 8001146:	2122      	movs	r1, #34	@ 0x22
 8001148:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2242      	movs	r2, #66	@ 0x42
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2200      	movs	r2, #0
 8001156:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800115c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	222c      	movs	r2, #44	@ 0x2c
 8001162:	18ba      	adds	r2, r7, r2
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800116e:	1dbb      	adds	r3, r7, #6
 8001170:	881c      	ldrh	r4, [r3, #0]
 8001172:	2308      	movs	r3, #8
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	881a      	ldrh	r2, [r3, #0]
 8001178:	230a      	movs	r3, #10
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	8819      	ldrh	r1, [r3, #0]
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	0023      	movs	r3, r4
 800118a:	f000 f92f 	bl	80013ec <I2C_RequestMemoryRead>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d005      	beq.n	800119e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2240      	movs	r2, #64	@ 0x40
 8001196:	2100      	movs	r1, #0
 8001198:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0b9      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2bff      	cmp	r3, #255	@ 0xff
 80011a6:	d911      	bls.n	80011cc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	22ff      	movs	r2, #255	@ 0xff
 80011ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	045c      	lsls	r4, r3, #17
 80011b8:	230a      	movs	r3, #10
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	8819      	ldrh	r1, [r3, #0]
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	4b56      	ldr	r3, [pc, #344]	@ (800131c <HAL_I2C_Mem_Read+0x260>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	0023      	movs	r3, r4
 80011c6:	f000 fb6f 	bl	80018a8 <I2C_TransferConfig>
 80011ca:	e012      	b.n	80011f2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	049c      	lsls	r4, r3, #18
 80011e0:	230a      	movs	r3, #10
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	8819      	ldrh	r1, [r3, #0]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	4b4c      	ldr	r3, [pc, #304]	@ (800131c <HAL_I2C_Mem_Read+0x260>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	0023      	movs	r3, r4
 80011ee:	f000 fb5b 	bl	80018a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80011f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	0013      	movs	r3, r2
 80011fc:	2200      	movs	r2, #0
 80011fe:	2104      	movs	r1, #4
 8001200:	f000 f978 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e082      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001228:	3b01      	subs	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001234:	b29b      	uxth	r3, r3
 8001236:	3b01      	subs	r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d03a      	beq.n	80012be <HAL_I2C_Mem_Read+0x202>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800124c:	2b00      	cmp	r3, #0
 800124e:	d136      	bne.n	80012be <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	0013      	movs	r3, r2
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	f000 f949 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e053      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	2bff      	cmp	r3, #255	@ 0xff
 8001272:	d911      	bls.n	8001298 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	22ff      	movs	r2, #255	@ 0xff
 8001278:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800127e:	b2da      	uxtb	r2, r3
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	045c      	lsls	r4, r3, #17
 8001284:	230a      	movs	r3, #10
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	8819      	ldrh	r1, [r3, #0]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	2300      	movs	r3, #0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	0023      	movs	r3, r4
 8001292:	f000 fb09 	bl	80018a8 <I2C_TransferConfig>
 8001296:	e012      	b.n	80012be <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129c:	b29a      	uxth	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	049c      	lsls	r4, r3, #18
 80012ac:	230a      	movs	r3, #10
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	8819      	ldrh	r1, [r3, #0]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	0023      	movs	r3, r4
 80012ba:	f000 faf5 	bl	80018a8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d194      	bne.n	80011f2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 f9ae 	bl	8001630 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012d4:	1e03      	subs	r3, r0, #0
 80012d6:	d001      	beq.n	80012dc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e01a      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2220      	movs	r2, #32
 80012e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	490c      	ldr	r1, [pc, #48]	@ (8001320 <HAL_I2C_Mem_Read+0x264>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2241      	movs	r2, #65	@ 0x41
 80012f8:	2120      	movs	r1, #32
 80012fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2242      	movs	r2, #66	@ 0x42
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2240      	movs	r2, #64	@ 0x40
 8001308:	2100      	movs	r1, #0
 800130a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e000      	b.n	8001312 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001310:	2302      	movs	r3, #2
  }
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b007      	add	sp, #28
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	80002400 	.word	0x80002400
 8001320:	fe00e800 	.word	0xfe00e800

08001324 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	000c      	movs	r4, r1
 800132e:	0010      	movs	r0, r2
 8001330:	0019      	movs	r1, r3
 8001332:	250a      	movs	r5, #10
 8001334:	197b      	adds	r3, r7, r5
 8001336:	1c22      	adds	r2, r4, #0
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	2308      	movs	r3, #8
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	801a      	strh	r2, [r3, #0]
 8001342:	1dbb      	adds	r3, r7, #6
 8001344:	1c0a      	adds	r2, r1, #0
 8001346:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	045c      	lsls	r4, r3, #17
 8001352:	197b      	adds	r3, r7, r5
 8001354:	8819      	ldrh	r1, [r3, #0]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <I2C_RequestMemoryWrite+0xc4>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	0023      	movs	r3, r4
 800135e:	f000 faa3 	bl	80018a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001364:	6a39      	ldr	r1, [r7, #32]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	0018      	movs	r0, r3
 800136a:	f000 f91b 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e033      	b.n	80013de <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001376:	1dbb      	adds	r3, r7, #6
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800137e:	2308      	movs	r3, #8
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
 800138c:	e019      	b.n	80013c2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800138e:	2308      	movs	r3, #8
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2da      	uxtb	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a2:	6a39      	ldr	r1, [r7, #32]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f8fc 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e014      	b.n	80013de <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013b4:	2308      	movs	r3, #8
 80013b6:	18fb      	adds	r3, r7, r3
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013c2:	6a3a      	ldr	r2, [r7, #32]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	0013      	movs	r3, r2
 80013cc:	2200      	movs	r2, #0
 80013ce:	2180      	movs	r1, #128	@ 0x80
 80013d0:	f000 f890 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d001      	beq.n	80013dc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bdb0      	pop	{r4, r5, r7, pc}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	80002000 	.word	0x80002000

080013ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80013ec:	b5b0      	push	{r4, r5, r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	000c      	movs	r4, r1
 80013f6:	0010      	movs	r0, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	250a      	movs	r5, #10
 80013fc:	197b      	adds	r3, r7, r5
 80013fe:	1c22      	adds	r2, r4, #0
 8001400:	801a      	strh	r2, [r3, #0]
 8001402:	2308      	movs	r3, #8
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	801a      	strh	r2, [r3, #0]
 800140a:	1dbb      	adds	r3, r7, #6
 800140c:	1c0a      	adds	r2, r1, #0
 800140e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	197b      	adds	r3, r7, r5
 8001418:	8819      	ldrh	r1, [r3, #0]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <I2C_RequestMemoryRead+0xc0>)
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2300      	movs	r3, #0
 8001422:	f000 fa41 	bl	80018a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001428:	6a39      	ldr	r1, [r7, #32]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f8b9 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e033      	b.n	80014a2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800143a:	1dbb      	adds	r3, r7, #6
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001442:	2308      	movs	r3, #8
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001450:	e019      	b.n	8001486 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001452:	2308      	movs	r3, #8
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001466:	6a39      	ldr	r1, [r7, #32]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f89a 	bl	80015a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001470:	1e03      	subs	r3, r0, #0
 8001472:	d001      	beq.n	8001478 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e014      	b.n	80014a2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001478:	2308      	movs	r3, #8
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001486:	6a3a      	ldr	r2, [r7, #32]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	0013      	movs	r3, r2
 8001490:	2200      	movs	r2, #0
 8001492:	2140      	movs	r1, #64	@ 0x40
 8001494:	f000 f82e 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d001      	beq.n	80014a0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bdb0      	pop	{r4, r5, r7, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	80002000 	.word	0x80002000

080014b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d103      	bne.n	80014ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d007      	beq.n	80014ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699a      	ldr	r2, [r3, #24]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	619a      	str	r2, [r3, #24]
  }
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	1dfb      	adds	r3, r7, #7
 8001502:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	e03a      	b.n	800157c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	0018      	movs	r0, r3
 800150e:	f000 f8d3 	bl	80016b8 <I2C_IsErrorOccurred>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e040      	b.n	800159c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	d02d      	beq.n	800157c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001520:	f7ff f98e 	bl	8000840 <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d302      	bcc.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d122      	bne.n	800157c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	4013      	ands	r3, r2
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	425a      	negs	r2, r3
 8001546:	4153      	adcs	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	001a      	movs	r2, r3
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d113      	bne.n	800157c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001558:	2220      	movs	r2, #32
 800155a:	431a      	orrs	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2241      	movs	r2, #65	@ 0x41
 8001564:	2120      	movs	r1, #32
 8001566:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2242      	movs	r2, #66	@ 0x42
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	@ 0x40
 8001574:	2100      	movs	r1, #0
 8001576:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00f      	b.n	800159c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4013      	ands	r3, r2
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	425a      	negs	r2, r3
 800158c:	4153      	adcs	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	001a      	movs	r2, r3
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d0b5      	beq.n	8001506 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015b0:	e032      	b.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f000 f87d 	bl	80016b8 <I2C_IsErrorOccurred>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e030      	b.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3301      	adds	r3, #1
 80015ca:	d025      	beq.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015cc:	f7ff f938 	bl	8000840 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d302      	bcc.n	80015e2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d11a      	bne.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d013      	beq.n	8001618 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	2220      	movs	r2, #32
 80015f6:	431a      	orrs	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2241      	movs	r2, #65	@ 0x41
 8001600:	2120      	movs	r1, #32
 8001602:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2242      	movs	r2, #66	@ 0x42
 8001608:	2100      	movs	r1, #0
 800160a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e007      	b.n	8001628 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	2b02      	cmp	r3, #2
 8001624:	d1c5      	bne.n	80015b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}

08001630 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800163c:	e02f      	b.n	800169e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	0018      	movs	r0, r3
 8001646:	f000 f837 	bl	80016b8 <I2C_IsErrorOccurred>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e02d      	b.n	80016ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001652:	f7ff f8f5 	bl	8000840 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	429a      	cmp	r2, r3
 8001660:	d302      	bcc.n	8001668 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d11a      	bne.n	800169e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2220      	movs	r2, #32
 8001670:	4013      	ands	r3, r2
 8001672:	2b20      	cmp	r3, #32
 8001674:	d013      	beq.n	800169e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167a:	2220      	movs	r2, #32
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2241      	movs	r2, #65	@ 0x41
 8001686:	2120      	movs	r1, #32
 8001688:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2242      	movs	r2, #66	@ 0x42
 800168e:	2100      	movs	r1, #0
 8001690:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2240      	movs	r2, #64	@ 0x40
 8001696:	2100      	movs	r1, #0
 8001698:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e007      	b.n	80016ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	2220      	movs	r2, #32
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d1c8      	bne.n	800163e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b004      	add	sp, #16
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2327      	movs	r3, #39	@ 0x27
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2210      	movs	r2, #16
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <I2C_IsErrorOccurred+0x2e>
 80016e4:	e079      	b.n	80017da <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2210      	movs	r2, #16
 80016ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016ee:	e057      	b.n	80017a0 <I2C_IsErrorOccurred+0xe8>
 80016f0:	2227      	movs	r2, #39	@ 0x27
 80016f2:	18bb      	adds	r3, r7, r2
 80016f4:	18ba      	adds	r2, r7, r2
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	3301      	adds	r3, #1
 80016fe:	d04f      	beq.n	80017a0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001700:	f7ff f89e 	bl	8000840 <HAL_GetTick>
 8001704:	0002      	movs	r2, r0
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	d302      	bcc.n	8001716 <I2C_IsErrorOccurred+0x5e>
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d144      	bne.n	80017a0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	2380      	movs	r3, #128	@ 0x80
 800171e:	01db      	lsls	r3, r3, #7
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001724:	2013      	movs	r0, #19
 8001726:	183b      	adds	r3, r7, r0
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	2142      	movs	r1, #66	@ 0x42
 800172c:	5c52      	ldrb	r2, [r2, r1]
 800172e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699a      	ldr	r2, [r3, #24]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	401a      	ands	r2, r3
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	429a      	cmp	r2, r3
 8001742:	d126      	bne.n	8001792 <I2C_IsErrorOccurred+0xda>
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	01db      	lsls	r3, r3, #7
 800174a:	429a      	cmp	r2, r3
 800174c:	d021      	beq.n	8001792 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800174e:	183b      	adds	r3, r7, r0
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b20      	cmp	r3, #32
 8001754:	d01d      	beq.n	8001792 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2180      	movs	r1, #128	@ 0x80
 8001762:	01c9      	lsls	r1, r1, #7
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001768:	f7ff f86a 	bl	8000840 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001770:	e00f      	b.n	8001792 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001772:	f7ff f865 	bl	8000840 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b19      	cmp	r3, #25
 800177e:	d908      	bls.n	8001792 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	2220      	movs	r2, #32
 8001784:	4313      	orrs	r3, r2
 8001786:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001788:	2327      	movs	r3, #39	@ 0x27
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]

              break;
 8001790:	e006      	b.n	80017a0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2220      	movs	r2, #32
 800179a:	4013      	ands	r3, r2
 800179c:	2b20      	cmp	r3, #32
 800179e:	d1e8      	bne.n	8001772 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2220      	movs	r2, #32
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	d004      	beq.n	80017b8 <I2C_IsErrorOccurred+0x100>
 80017ae:	2327      	movs	r3, #39	@ 0x27
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d09b      	beq.n	80016f0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017b8:	2327      	movs	r3, #39	@ 0x27
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2220      	movs	r2, #32
 80017c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	2204      	movs	r2, #4
 80017ce:	4313      	orrs	r3, r2
 80017d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017d2:	2327      	movs	r3, #39	@ 0x27
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d00c      	beq.n	8001806 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4313      	orrs	r3, r2
 80017f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2280      	movs	r2, #128	@ 0x80
 80017fa:	0052      	lsls	r2, r2, #1
 80017fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017fe:	2327      	movs	r3, #39	@ 0x27
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2201      	movs	r2, #1
 8001804:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4013      	ands	r3, r2
 800180e:	d00c      	beq.n	800182a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	2208      	movs	r2, #8
 8001814:	4313      	orrs	r3, r2
 8001816:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2280      	movs	r2, #128	@ 0x80
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001822:	2327      	movs	r3, #39	@ 0x27
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d00c      	beq.n	800184e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	2202      	movs	r2, #2
 8001838:	4313      	orrs	r3, r2
 800183a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2280      	movs	r2, #128	@ 0x80
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001846:	2327      	movs	r3, #39	@ 0x27
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800184e:	2327      	movs	r3, #39	@ 0x27
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01d      	beq.n	8001894 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff fe28 	bl	80014b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	490e      	ldr	r1, [pc, #56]	@ (80018a4 <I2C_IsErrorOccurred+0x1ec>)
 800186c:	400a      	ands	r2, r1
 800186e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	431a      	orrs	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2241      	movs	r2, #65	@ 0x41
 8001880:	2120      	movs	r1, #32
 8001882:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2242      	movs	r2, #66	@ 0x42
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001894:	2327      	movs	r3, #39	@ 0x27
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	781b      	ldrb	r3, [r3, #0]
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b00a      	add	sp, #40	@ 0x28
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	fe00e800 	.word	0xfe00e800

080018a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	0008      	movs	r0, r1
 80018b2:	0011      	movs	r1, r2
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	240a      	movs	r4, #10
 80018b8:	193b      	adds	r3, r7, r4
 80018ba:	1c02      	adds	r2, r0, #0
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	2009      	movs	r0, #9
 80018c0:	183b      	adds	r3, r7, r0
 80018c2:	1c0a      	adds	r2, r1, #0
 80018c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	059b      	lsls	r3, r3, #22
 80018cc:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018ce:	183b      	adds	r3, r7, r0
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	0419      	lsls	r1, r3, #16
 80018d4:	23ff      	movs	r3, #255	@ 0xff
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018da:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e2:	4313      	orrs	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f2:	0d51      	lsrs	r1, r2, #21
 80018f4:	2280      	movs	r2, #128	@ 0x80
 80018f6:	00d2      	lsls	r2, r2, #3
 80018f8:	400a      	ands	r2, r1
 80018fa:	4907      	ldr	r1, [pc, #28]	@ (8001918 <I2C_TransferConfig+0x70>)
 80018fc:	430a      	orrs	r2, r1
 80018fe:	43d2      	mvns	r2, r2
 8001900:	401a      	ands	r2, r3
 8001902:	0011      	movs	r1, r2
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b007      	add	sp, #28
 8001914:	bd90      	pop	{r4, r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	03ff63ff 	.word	0x03ff63ff

0800191c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	@ 0x41
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d138      	bne.n	80019a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2240      	movs	r2, #64	@ 0x40
 8001936:	5c9b      	ldrb	r3, [r3, r2]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800193c:	2302      	movs	r3, #2
 800193e:	e032      	b.n	80019a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2240      	movs	r2, #64	@ 0x40
 8001944:	2101      	movs	r1, #1
 8001946:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2241      	movs	r2, #65	@ 0x41
 800194c:	2124      	movs	r1, #36	@ 0x24
 800194e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	438a      	bics	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4911      	ldr	r1, [pc, #68]	@ (80019b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800196c:	400a      	ands	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2241      	movs	r2, #65	@ 0x41
 8001994:	2120      	movs	r1, #32
 8001996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019a4:	2302      	movs	r3, #2
  }
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	ffffefff 	.word	0xffffefff

080019b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2241      	movs	r2, #65	@ 0x41
 80019c2:	5c9b      	ldrb	r3, [r3, r2]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d139      	bne.n	8001a3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2240      	movs	r2, #64	@ 0x40
 80019ce:	5c9b      	ldrb	r3, [r3, r2]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e033      	b.n	8001a40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	2101      	movs	r1, #1
 80019de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2241      	movs	r2, #65	@ 0x41
 80019e4:	2124      	movs	r1, #36	@ 0x24
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2241      	movs	r2, #65	@ 0x41
 8001a2e:	2120      	movs	r1, #32
 8001a30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2240      	movs	r2, #64	@ 0x40
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
  }
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	fffff0ff 	.word	0xfffff0ff

08001a4c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e1d0      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1e>
 8001a68:	e069      	b.n	8001b3e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4bc8      	ldr	r3, [pc, #800]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	@ 0x38
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d15d      	bne.n	8001b3e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1bc      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	025b      	lsls	r3, r3, #9
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x56>
 8001a92:	4bbe      	ldr	r3, [pc, #760]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4bbd      	ldr	r3, [pc, #756]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	0249      	lsls	r1, r1, #9
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e020      	b.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	23a0      	movs	r3, #160	@ 0xa0
 8001aa8:	02db      	lsls	r3, r3, #11
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d10e      	bne.n	8001acc <HAL_RCC_OscConfig+0x80>
 8001aae:	4bb7      	ldr	r3, [pc, #732]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4bb6      	ldr	r3, [pc, #728]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ab4:	2180      	movs	r1, #128	@ 0x80
 8001ab6:	02c9      	lsls	r1, r1, #11
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4bb3      	ldr	r3, [pc, #716]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4bb2      	ldr	r3, [pc, #712]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ac2:	2180      	movs	r1, #128	@ 0x80
 8001ac4:	0249      	lsls	r1, r1, #9
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x98>
 8001acc:	4baf      	ldr	r3, [pc, #700]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4bae      	ldr	r3, [pc, #696]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ad2:	49af      	ldr	r1, [pc, #700]	@ (8001d90 <HAL_RCC_OscConfig+0x344>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4bac      	ldr	r3, [pc, #688]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4bab      	ldr	r3, [pc, #684]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ade:	49ad      	ldr	r1, [pc, #692]	@ (8001d94 <HAL_RCC_OscConfig+0x348>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d014      	beq.n	8001b16 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7fe fea8 	bl	8000840 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001af6:	f7fe fea3 	bl	8000840 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	@ 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e17b      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b08:	4ba0      	ldr	r3, [pc, #640]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0xaa>
 8001b14:	e013      	b.n	8001b3e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7fe fe93 	bl	8000840 <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b20:	f7fe fe8e 	bl	8000840 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	@ 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e166      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b32:	4b96      	ldr	r3, [pc, #600]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d100      	bne.n	8001b4a <HAL_RCC_OscConfig+0xfe>
 8001b48:	e086      	b.n	8001c58 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4a:	4b90      	ldr	r3, [pc, #576]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	@ 0x38
 8001b50:	4013      	ands	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d12f      	bne.n	8001bba <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e14c      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b89      	ldr	r3, [pc, #548]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a8b      	ldr	r2, [pc, #556]	@ (8001d98 <HAL_RCC_OscConfig+0x34c>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	021a      	lsls	r2, r3, #8
 8001b76:	4b85      	ldr	r3, [pc, #532]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b82:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a85      	ldr	r2, [pc, #532]	@ (8001d9c <HAL_RCC_OscConfig+0x350>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	4b7e      	ldr	r3, [pc, #504]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b96:	4b7d      	ldr	r3, [pc, #500]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0adb      	lsrs	r3, r3, #11
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	4a7f      	ldr	r2, [pc, #508]	@ (8001da0 <HAL_RCC_OscConfig+0x354>)
 8001ba2:	40da      	lsrs	r2, r3
 8001ba4:	4b7f      	ldr	r3, [pc, #508]	@ (8001da4 <HAL_RCC_OscConfig+0x358>)
 8001ba6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ba8:	4b7f      	ldr	r3, [pc, #508]	@ (8001da8 <HAL_RCC_OscConfig+0x35c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7fe fdeb 	bl	8000788 <HAL_InitTick>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d050      	beq.n	8001c58 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e122      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d030      	beq.n	8001c24 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bc2:	4b72      	ldr	r3, [pc, #456]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	@ (8001d9c <HAL_RCC_OscConfig+0x350>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	4b6e      	ldr	r3, [pc, #440]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001bd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b6c      	ldr	r3, [pc, #432]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	0049      	lsls	r1, r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fe2c 	bl	8000840 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bee:	f7fe fe27 	bl	8000840 <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0ff      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	4b62      	ldr	r3, [pc, #392]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b5f      	ldr	r3, [pc, #380]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a61      	ldr	r2, [pc, #388]	@ (8001d98 <HAL_RCC_OscConfig+0x34c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	e019      	b.n	8001c58 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001c24:	4b59      	ldr	r3, [pc, #356]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b58      	ldr	r3, [pc, #352]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c2a:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_OscConfig+0x360>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe fe06 	bl	8000840 <HAL_GetTick>
 8001c34:	0003      	movs	r3, r0
 8001c36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c3a:	f7fe fe01 	bl	8000840 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0d9      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	@ 0x80
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4013      	ands	r3, r2
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2208      	movs	r2, #8
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d042      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c62:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2238      	movs	r2, #56	@ 0x38
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b18      	cmp	r3, #24
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d138      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0c2      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c82:	4b42      	ldr	r3, [pc, #264]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c86:	4b41      	ldr	r3, [pc, #260]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fdd7 	bl	8000840 <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c98:	f7fe fdd2 	bl	8000840 <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0aa      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001caa:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0f1      	beq.n	8001c98 <HAL_RCC_OscConfig+0x24c>
 8001cb4:	e018      	b.n	8001ce8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b35      	ldr	r3, [pc, #212]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001cb8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cba:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fdbd 	bl	8000840 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ccc:	f7fe fdb8 	bl	8000840 <HAL_GetTick>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e090      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cde:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d1f1      	bne.n	8001ccc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2a8>
 8001cf2:	e084      	b.n	8001dfe <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2238      	movs	r2, #56	@ 0x38
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2c6>
 8001d10:	e075      	b.n	8001dfe <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e074      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d106      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2e0>
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d2a:	e01c      	b.n	8001d66 <HAL_RCC_OscConfig+0x31a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x302>
 8001d34:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x31a>
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d54:	2101      	movs	r1, #1
 8001d56:	438a      	bics	r2, r1
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001d60:	2104      	movs	r1, #4
 8001d62:	438a      	bics	r2, r1
 8001d64:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d028      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fd67 	bl	8000840 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d76:	e01d      	b.n	8001db4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe fd62 	bl	8000840 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4a0b      	ldr	r2, [pc, #44]	@ (8001db0 <HAL_RCC_OscConfig+0x364>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d915      	bls.n	8001db4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e039      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	fffeffff 	.word	0xfffeffff
 8001d94:	fffbffff 	.word	0xfffbffff
 8001d98:	ffff80ff 	.word	0xffff80ff
 8001d9c:	ffffc7ff 	.word	0xffffc7ff
 8001da0:	02dc6c00 	.word	0x02dc6c00
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004
 8001dac:	fffffeff 	.word	0xfffffeff
 8001db0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_RCC_OscConfig+0x3bc>)
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d0dc      	beq.n	8001d78 <HAL_RCC_OscConfig+0x32c>
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fd3e 	bl	8000840 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe fd39 	bl	8000840 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <HAL_RCC_OscConfig+0x3c0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e010      	b.n	8001e00 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dde:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <HAL_RCC_OscConfig+0x3bc>)
 8001de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_OscConfig+0x3bc>)
 8001df4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <HAL_RCC_OscConfig+0x3bc>)
 8001df8:	4905      	ldr	r1, [pc, #20]	@ (8001e10 <HAL_RCC_OscConfig+0x3c4>)
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b006      	add	sp, #24
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	00001388 	.word	0x00001388
 8001e10:	efffffff 	.word	0xefffffff

08001e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0df      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b71      	ldr	r3, [pc, #452]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d91e      	bls.n	8001e74 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b6e      	ldr	r3, [pc, #440]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	4393      	bics	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	4b6b      	ldr	r3, [pc, #428]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e48:	f7fe fcfa 	bl	8000840 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e50:	e009      	b.n	8001e66 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e52:	f7fe fcf5 	bl	8000840 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1e0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0c0      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e66:	4b62      	ldr	r3, [pc, #392]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d017      	beq.n	8001eae <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2204      	movs	r2, #4
 8001e84:	4013      	ands	r3, r2
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e88:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a5b      	ldr	r2, [pc, #364]	@ (8001ffc <HAL_RCC_ClockConfig+0x1e8>)
 8001e8e:	401a      	ands	r2, r3
 8001e90:	4b59      	ldr	r3, [pc, #356]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001e92:	21b0      	movs	r1, #176	@ 0xb0
 8001e94:	0109      	lsls	r1, r1, #4
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9a:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4a58      	ldr	r2, [pc, #352]	@ (8002000 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d04b      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d11f      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e08b      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed8:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d113      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e07f      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ef0:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e074      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e06d      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2207      	movs	r2, #7
 8001f12:	4393      	bics	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f20:	f7fe fc8e 	bl	8000840 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f2a:	f7fe fc89 	bl	8000840 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1e0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e054      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2238      	movs	r2, #56	@ 0x38
 8001f44:	401a      	ands	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1ec      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	4b27      	ldr	r3, [pc, #156]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2207      	movs	r2, #7
 8001f56:	4013      	ands	r3, r2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d21e      	bcs.n	8001f9c <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	4b21      	ldr	r3, [pc, #132]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fc66 	bl	8000840 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7a:	f7fe fc61 	bl	8000840 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1e0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e02c      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1dc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2207      	movs	r2, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a16      	ldr	r2, [pc, #88]	@ (8002004 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fba:	f000 f82b 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fbe:	0001      	movs	r1, r0
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1e4>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fca:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_RCC_ClockConfig+0x1f4>)
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fd0:	221f      	movs	r2, #31
 8001fd2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fd4:	000a      	movs	r2, r1
 8001fd6:	40da      	lsrs	r2, r3
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_RCC_ClockConfig+0x1f8>)
 8001fda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_RCC_ClockConfig+0x1fc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7fe fbd1 	bl	8000788 <HAL_InitTick>
 8001fe6:	0003      	movs	r3, r0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40022000 	.word	0x40022000
 8001ff4:	00001388 	.word	0x00001388
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	ffff84ff 	.word	0xffff84ff
 8002000:	fffff0ff 	.word	0xfffff0ff
 8002004:	ffff8fff 	.word	0xffff8fff
 8002008:	080022dc 	.word	0x080022dc
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800201a:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <HAL_RCC_GetSysClockFreq+0x78>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2238      	movs	r2, #56	@ 0x38
 8002020:	4013      	ands	r3, r2
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_RCC_GetSysClockFreq+0x78>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0adb      	lsrs	r3, r3, #11
 800202a:	2207      	movs	r2, #7
 800202c:	4013      	ands	r3, r2
 800202e:	2201      	movs	r2, #1
 8002030:	409a      	lsls	r2, r3
 8002032:	0013      	movs	r3, r2
 8002034:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	4815      	ldr	r0, [pc, #84]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x7c>)
 800203a:	f7fe f865 	bl	8000108 <__udivsi3>
 800203e:	0003      	movs	r3, r0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	e01e      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_RCC_GetSysClockFreq+0x78>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2238      	movs	r2, #56	@ 0x38
 800204a:	4013      	ands	r3, r2
 800204c:	2b08      	cmp	r3, #8
 800204e:	d102      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	e015      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_RCC_GetSysClockFreq+0x78>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2238      	movs	r2, #56	@ 0x38
 800205c:	4013      	ands	r3, r2
 800205e:	2b20      	cmp	r3, #32
 8002060:	d103      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002062:	2380      	movs	r3, #128	@ 0x80
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	e00b      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_RCC_GetSysClockFreq+0x78>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2238      	movs	r2, #56	@ 0x38
 8002070:	4013      	ands	r3, r2
 8002072:	2b18      	cmp	r3, #24
 8002074:	d103      	bne.n	800207e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002076:	23fa      	movs	r3, #250	@ 0xfa
 8002078:	01db      	lsls	r3, r3, #7
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	e001      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002082:	687b      	ldr	r3, [r7, #4]
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	02dc6c00 	.word	0x02dc6c00

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800209c:	2313      	movs	r3, #19
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a4:	2312      	movs	r3, #18
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	4013      	ands	r3, r2
 80020b4:	d100      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80020b6:	e079      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2011      	movs	r0, #17
 80020ba:	183b      	adds	r3, r7, r0
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c0:	4b63      	ldr	r3, [pc, #396]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	4013      	ands	r3, r2
 80020ca:	d110      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	0549      	lsls	r1, r1, #21
 80020d6:	430a      	orrs	r2, r1
 80020d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020da:	4b5d      	ldr	r3, [pc, #372]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	4013      	ands	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020f2:	23c0      	movs	r3, #192	@ 0xc0
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d019      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	d014      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800210a:	4b51      	ldr	r3, [pc, #324]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	4a51      	ldr	r2, [pc, #324]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002110:	4013      	ands	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002114:	4b4e      	ldr	r3, [pc, #312]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002116:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002118:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0249      	lsls	r1, r1, #9
 800211e:	430a      	orrs	r2, r1
 8002120:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002124:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002126:	4b4a      	ldr	r3, [pc, #296]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002128:	494b      	ldr	r1, [pc, #300]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800212a:	400a      	ands	r2, r1
 800212c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800212e:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2201      	movs	r2, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d016      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fb80 	bl	8000840 <HAL_GetTick>
 8002140:	0003      	movs	r3, r0
 8002142:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002144:	e00c      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fb7b 	bl	8000840 <HAL_GetTick>
 800214a:	0002      	movs	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	4a42      	ldr	r2, [pc, #264]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d904      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002156:	2313      	movs	r3, #19
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2203      	movs	r2, #3
 800215c:	701a      	strb	r2, [r3, #0]
          break;
 800215e:	e004      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	2202      	movs	r2, #2
 8002166:	4013      	ands	r3, r2
 8002168:	d0ed      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800216a:	2313      	movs	r3, #19
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10a      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002174:	4b36      	ldr	r3, [pc, #216]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002178:	4a36      	ldr	r2, [pc, #216]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	4b33      	ldr	r3, [pc, #204]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002184:	430a      	orrs	r2, r1
 8002186:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002188:	e005      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800218a:	2312      	movs	r3, #18
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2213      	movs	r2, #19
 8002190:	18ba      	adds	r2, r7, r2
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002196:	2311      	movs	r3, #17
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a6:	492e      	ldr	r1, [pc, #184]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	d009      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4b26      	ldr	r3, [pc, #152]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ba:	2203      	movs	r2, #3
 80021bc:	4393      	bics	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d009      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d8:	4a22      	ldr	r2, [pc, #136]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e4:	430a      	orrs	r2, r1
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	0899      	lsrs	r1, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695a      	ldr	r2, [r3, #20]
 80021fe:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002200:	430a      	orrs	r2, r1
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	4a15      	ldr	r2, [pc, #84]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800221e:	430a      	orrs	r2, r1
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2280      	movs	r2, #128	@ 0x80
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	22e0      	movs	r2, #224	@ 0xe0
 8002232:	4393      	bics	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002240:	2312      	movs	r3, #18
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	781b      	ldrb	r3, [r3, #0]
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b006      	add	sp, #24
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			@ (mov r8, r8)
 8002250:	40021000 	.word	0x40021000
 8002254:	fffffcff 	.word	0xfffffcff
 8002258:	fffeffff 	.word	0xfffeffff
 800225c:	00001388 	.word	0x00001388
 8002260:	efffffff 	.word	0xefffffff
 8002264:	ffffcfff 	.word	0xffffcfff
 8002268:	ffff3fff 	.word	0xffff3fff

0800226c <memset>:
 800226c:	0003      	movs	r3, r0
 800226e:	1882      	adds	r2, r0, r2
 8002270:	4293      	cmp	r3, r2
 8002272:	d100      	bne.n	8002276 <memset+0xa>
 8002274:	4770      	bx	lr
 8002276:	7019      	strb	r1, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	e7f9      	b.n	8002270 <memset+0x4>

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4c0c      	ldr	r4, [pc, #48]	@ (80022b4 <__libc_init_array+0x38>)
 8002282:	4d0d      	ldr	r5, [pc, #52]	@ (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	2600      	movs	r6, #0
 800228e:	f000 f819 	bl	80022c4 <_init>
 8002292:	4c0a      	ldr	r4, [pc, #40]	@ (80022bc <__libc_init_array+0x40>)
 8002294:	4d0a      	ldr	r5, [pc, #40]	@ (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	00b3      	lsls	r3, r6, #2
 80022a2:	58eb      	ldr	r3, [r5, r3]
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	00b3      	lsls	r3, r6, #2
 80022ac:	58eb      	ldr	r3, [r5, r3]
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	0800231c 	.word	0x0800231c
 80022b8:	0800231c 	.word	0x0800231c
 80022bc:	08002320 	.word	0x08002320
 80022c0:	0800231c 	.word	0x0800231c

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
